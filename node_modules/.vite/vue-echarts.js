import "./chunk-5SV57J7K.js";
import "./chunk-TGKJKD5H.js";
import {
  init,
  throttle
} from "./chunk-C2QZHW5Q.js";
import "./chunk-HBWDC7AH.js";
import {
  computed,
  defineComponent,
  h,
  inject,
  nextTick,
  onMounted,
  onUnmounted,
  shallowRef,
  toRefs,
  unref,
  watch,
  watchEffect
} from "./chunk-UCFIFGCV.js";
import "./chunk-4YJPEX7N.js";

// node_modules/vue-demi/lib/index.mjs
var Vue2 = void 0;

// node_modules/resize-detector/esm/index.js
var raf = null;
function requestAnimationFrame(callback) {
  if (!raf) {
    raf = (window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function(callback2) {
      return setTimeout(callback2, 16);
    }).bind(window);
  }
  return raf(callback);
}
var caf = null;
function cancelAnimationFrame(id) {
  if (!caf) {
    caf = (window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || function(id2) {
      clearTimeout(id2);
    }).bind(window);
  }
  caf(id);
}
function createStyles(styleText) {
  var style2 = document.createElement("style");
  if (style2.styleSheet) {
    style2.styleSheet.cssText = styleText;
  } else {
    style2.appendChild(document.createTextNode(styleText));
  }
  (document.querySelector("head") || document.body).appendChild(style2);
  return style2;
}
function createElement(tagName, props) {
  if (props === void 0)
    props = {};
  var elem = document.createElement(tagName);
  Object.keys(props).forEach(function(key) {
    elem[key] = props[key];
  });
  return elem;
}
function getComputedStyle(elem, prop, pseudo) {
  var computedStyle = window.getComputedStyle(elem, pseudo || null) || {
    display: "none"
  };
  return computedStyle[prop];
}
function getRenderInfo(elem) {
  if (!document.documentElement.contains(elem)) {
    return {
      detached: true,
      rendered: false
    };
  }
  var current = elem;
  while (current !== document) {
    if (getComputedStyle(current, "display") === "none") {
      return {
        detached: false,
        rendered: false
      };
    }
    current = current.parentNode;
  }
  return {
    detached: false,
    rendered: true
  };
}
var css_248z = '.resize-triggers{visibility:hidden;opacity:0;pointer-events:none}.resize-contract-trigger,.resize-contract-trigger:before,.resize-expand-trigger,.resize-triggers{content:"";position:absolute;top:0;left:0;height:100%;width:100%;overflow:hidden}.resize-contract-trigger,.resize-expand-trigger{background:#eee;overflow:auto}.resize-contract-trigger:before{width:200%;height:200%}';
var total = 0;
var style = null;
function addListener(elem, callback) {
  if (!elem.__resize_mutation_handler__) {
    elem.__resize_mutation_handler__ = handleMutation.bind(elem);
  }
  var listeners = elem.__resize_listeners__;
  if (!listeners) {
    elem.__resize_listeners__ = [];
    if (window.ResizeObserver) {
      var offsetWidth = elem.offsetWidth;
      var offsetHeight = elem.offsetHeight;
      var ro = new ResizeObserver(function() {
        if (!elem.__resize_observer_triggered__) {
          elem.__resize_observer_triggered__ = true;
          if (elem.offsetWidth === offsetWidth && elem.offsetHeight === offsetHeight) {
            return;
          }
        }
        runCallbacks(elem);
      });
      var ref = getRenderInfo(elem);
      var detached = ref.detached;
      var rendered = ref.rendered;
      elem.__resize_observer_triggered__ = detached === false && rendered === false;
      elem.__resize_observer__ = ro;
      ro.observe(elem);
    } else if (elem.attachEvent && elem.addEventListener) {
      elem.__resize_legacy_resize_handler__ = function handleLegacyResize() {
        runCallbacks(elem);
      };
      elem.attachEvent("onresize", elem.__resize_legacy_resize_handler__);
      document.addEventListener("DOMSubtreeModified", elem.__resize_mutation_handler__);
    } else {
      if (!total) {
        style = createStyles(css_248z);
      }
      initTriggers(elem);
      elem.__resize_rendered__ = getRenderInfo(elem).rendered;
      if (window.MutationObserver) {
        var mo = new MutationObserver(elem.__resize_mutation_handler__);
        mo.observe(document, {
          attributes: true,
          childList: true,
          characterData: true,
          subtree: true
        });
        elem.__resize_mutation_observer__ = mo;
      }
    }
  }
  elem.__resize_listeners__.push(callback);
  total++;
}
function removeListener(elem, callback) {
  var listeners = elem.__resize_listeners__;
  if (!listeners) {
    return;
  }
  if (callback) {
    listeners.splice(listeners.indexOf(callback), 1);
  }
  if (!listeners.length || !callback) {
    if (elem.detachEvent && elem.removeEventListener) {
      elem.detachEvent("onresize", elem.__resize_legacy_resize_handler__);
      document.removeEventListener("DOMSubtreeModified", elem.__resize_mutation_handler__);
      return;
    }
    if (elem.__resize_observer__) {
      elem.__resize_observer__.unobserve(elem);
      elem.__resize_observer__.disconnect();
      elem.__resize_observer__ = null;
    } else {
      if (elem.__resize_mutation_observer__) {
        elem.__resize_mutation_observer__.disconnect();
        elem.__resize_mutation_observer__ = null;
      }
      elem.removeEventListener("scroll", handleScroll);
      elem.removeChild(elem.__resize_triggers__.triggers);
      elem.__resize_triggers__ = null;
    }
    elem.__resize_listeners__ = null;
  }
  if (!--total && style) {
    style.parentNode.removeChild(style);
  }
}
function getUpdatedSize(elem) {
  var ref = elem.__resize_last__;
  var width = ref.width;
  var height = ref.height;
  var offsetWidth = elem.offsetWidth;
  var offsetHeight = elem.offsetHeight;
  if (offsetWidth !== width || offsetHeight !== height) {
    return {
      width: offsetWidth,
      height: offsetHeight
    };
  }
  return null;
}
function handleMutation() {
  var ref = getRenderInfo(this);
  var rendered = ref.rendered;
  var detached = ref.detached;
  if (rendered !== this.__resize_rendered__) {
    if (!detached && this.__resize_triggers__) {
      resetTriggers(this);
      this.addEventListener("scroll", handleScroll, true);
    }
    this.__resize_rendered__ = rendered;
    runCallbacks(this);
  }
}
function handleScroll() {
  var this$1 = this;
  resetTriggers(this);
  if (this.__resize_raf__) {
    cancelAnimationFrame(this.__resize_raf__);
  }
  this.__resize_raf__ = requestAnimationFrame(function() {
    var updated = getUpdatedSize(this$1);
    if (updated) {
      this$1.__resize_last__ = updated;
      runCallbacks(this$1);
    }
  });
}
function runCallbacks(elem) {
  if (!elem || !elem.__resize_listeners__) {
    return;
  }
  elem.__resize_listeners__.forEach(function(callback) {
    callback.call(elem, elem);
  });
}
function initTriggers(elem) {
  var position = getComputedStyle(elem, "position");
  if (!position || position === "static") {
    elem.style.position = "relative";
  }
  elem.__resize_old_position__ = position;
  elem.__resize_last__ = {};
  var triggers = createElement("div", {
    className: "resize-triggers"
  });
  var expand = createElement("div", {
    className: "resize-expand-trigger"
  });
  var expandChild = createElement("div");
  var contract = createElement("div", {
    className: "resize-contract-trigger"
  });
  expand.appendChild(expandChild);
  triggers.appendChild(expand);
  triggers.appendChild(contract);
  elem.appendChild(triggers);
  elem.__resize_triggers__ = {
    triggers,
    expand,
    expandChild,
    contract
  };
  resetTriggers(elem);
  elem.addEventListener("scroll", handleScroll, true);
  elem.__resize_last__ = {
    width: elem.offsetWidth,
    height: elem.offsetHeight
  };
}
function resetTriggers(elem) {
  var ref = elem.__resize_triggers__;
  var expand = ref.expand;
  var expandChild = ref.expandChild;
  var contract = ref.contract;
  var csw = contract.scrollWidth;
  var csh = contract.scrollHeight;
  var eow = expand.offsetWidth;
  var eoh = expand.offsetHeight;
  var esw = expand.scrollWidth;
  var esh = expand.scrollHeight;
  contract.scrollLeft = csw;
  contract.scrollTop = csh;
  expandChild.style.width = eow + 1 + "px";
  expandChild.style.height = eoh + 1 + "px";
  expand.scrollLeft = esw;
  expand.scrollTop = esh;
}

// node_modules/vue-echarts/dist/index.esm.min.js
var O = function() {
  return (O = Object.assign || function(e) {
    for (var t, n = 1, o = arguments.length; n < o; n++)
      for (var r in t = arguments[n])
        Object.prototype.hasOwnProperty.call(t, r) && (e[r] = t[r]);
    return e;
  }).apply(this, arguments);
};
var m = ["getWidth", "getHeight", "getDom", "getOption", "resize", "dispatchAction", "convertToPixel", "convertFromPixel", "containPixel", "getDataURL", "getConnectedDataURL", "appendData", "clear", "isDisposed", "dispose"];
function b(e, t) {
  return n = Object.create(null), m.forEach(function(o) {
    n[o] = function(n2) {
      return function() {
        for (var o2 = [], r = 0; r < arguments.length; r++)
          o2[r] = arguments[r];
        if (e.value || t(), !e.value)
          throw new Error("ECharts is not initialized yet.");
        return e.value[n2].apply(e.value, o2);
      };
    }(o);
  }), n;
  var n;
}
var y = { autoresize: Boolean };
var x = "ecLoadingOptions";
var j = { loading: Boolean, loadingOptions: Object };
var E = [];
var w = [];
!function(e, t) {
  if (e && typeof document != "undefined") {
    var n, o = t.prepend === true ? "prepend" : "append", r = t.singleTag === true, i = typeof t.container == "string" ? document.querySelector(t.container) : document.getElementsByTagName("head")[0];
    if (r) {
      var a = E.indexOf(i);
      a === -1 && (a = E.push(i) - 1, w[a] = {}), n = w[a] && w[a][o] ? w[a][o] : w[a][o] = u();
    } else
      n = u();
    e.charCodeAt(0) === 65279 && (e = e.substring(1)), n.styleSheet ? n.styleSheet.cssText += e : n.appendChild(document.createTextNode(e));
  }
  function u() {
    var e2 = document.createElement("style");
    if (e2.setAttribute("type", "text/css"), t.attributes)
      for (var n2 = Object.keys(t.attributes), r2 = 0; r2 < n2.length; r2++)
        e2.setAttribute(n2[r2], t.attributes[n2[r2]]);
    var a2 = o === "prepend" ? "afterbegin" : "beforeend";
    return i.insertAdjacentElement(a2, e2), e2;
  }
}("x-vue-echarts{display:block;width:100%;height:100%}", {});
var z = /^on[^a-z]/;
var A = function(e) {
  return z.test(e);
};
Vue2 && Vue2.config.ignoredElements.push("x-vue-echarts");
var L = "ecTheme";
var C = "ecInitOptions";
var T = "ecUpdateOptions";
var U = defineComponent({ name: "echarts", props: O(O({ option: Object, theme: { type: [Object, String] }, initOptions: Object, updateOptions: Object, group: String, manualUpdate: Boolean }, y), j), inheritAttrs: false, setup: function(i, l) {
  var p = l.attrs, m2 = l.listeners, y2 = shallowRef(), x2 = shallowRef(), j2 = shallowRef(), E2 = inject("ecTheme", null), w2 = inject("ecInitOptions", null), z2 = inject("ecUpdateOptions", null), L2 = toRefs(i), C2 = L2.autoresize, T2 = L2.manualUpdate, U2 = L2.loading, D = L2.loadingOptions, S = computed(function() {
    return j2.value || i.option || Object.create(null);
  }), k = computed(function() {
    return i.theme || unref(E2) || {};
  }), B = computed(function() {
    return i.initOptions || unref(w2) || {};
  }), P = computed(function() {
    return i.updateOptions || unref(z2) || {};
  }), I = computed(function() {
    return function(e) {
      var t = {};
      for (var n in e)
        A(n) || (t[n] = e[n]);
      return t;
    }(p);
  });
  function N(e) {
    if (!x2.value && y2.value) {
      var t = x2.value = init(y2.value, k.value, B.value);
      i.group && (t.group = i.group);
      var n = m2;
      n || (n = {}, Object.keys(p).filter(function(e2) {
        return e2.indexOf("on") === 0 && e2.length > 2;
      }).forEach(function(e2) {
        var t2 = e2.charAt(2).toLowerCase() + e2.slice(3);
        n[t2] = p[e2];
      })), Object.keys(n).forEach(function(e2) {
        var o2 = n[e2];
        o2 && (e2.indexOf("zr:") === 0 ? t.getZr().on(e2.slice(3).toLowerCase(), o2) : t.on(e2.toLowerCase(), o2));
      }), C2.value ? nextTick(function() {
        !function() {
          if (t && !t.isDisposed())
            try {
              t.resize();
            } catch (e2) {
              if (e2.message === "Cannot read property 'get' of undefined")
                return;
              throw e2;
            }
        }(), o();
      }) : o();
    }
    function o() {
      t.setOption(e || S.value, P.value);
    }
  }
  function R() {
    x2.value && (x2.value.dispose(), x2.value = void 0);
  }
  var q = null;
  watch(T2, function(t) {
    typeof q == "function" && (q(), q = null), t || (q = watch(function() {
      return i.option;
    }, function(e) {
      e && (x2.value ? x2.value.setOption(e, P.value) : N());
    }, { deep: true }));
  }, { immediate: true }), watch([k, B], function() {
    R(), N();
  }, { deep: true }), watchEffect(function() {
    i.group && x2.value && (x2.value.group = i.group);
  });
  var F = b(x2, N);
  return function(e, i2, a) {
    var u = inject("ecLoadingOptions", {}), c = computed(function() {
      return O(O({}, unref(u)), a == null ? void 0 : a.value);
    });
    watchEffect(function() {
      var t = e.value;
      t && (i2.value ? t.showLoading(c.value) : t.hideLoading());
    });
  }(x2, U2, D), function(t, n, o) {
    var r = null;
    watch([o, t, n], function(e, t2, n2) {
      var o2 = e[0], i2 = e[1], a = e[2];
      o2 && i2 && a && (r = throttle(function() {
        i2.resize();
      }, 100), addListener(o2, r)), n2(function() {
        r && o2 && removeListener(o2, r);
      });
    });
  }(x2, C2, y2), onMounted(function() {
    i.option && N();
  }), onUnmounted(R), O({ chart: x2, root: y2, setOption: function(e, t) {
    i.manualUpdate && (j2.value = e), x2.value ? x2.value.setOption(e, t || {}) : N(e);
  }, nonEventAttrs: I }, F);
}, render: function() {
  var e = O({}, this.nonEventAttrs);
  return e.ref = "root", e.class = e.class ? ["echarts"].concat(e.class) : "echarts", h("x-vue-echarts", e);
} });
var index_esm_min_default = U;

// dep:vue-echarts
var vue_echarts_default = index_esm_min_default;
export {
  C as INIT_OPTIONS_KEY,
  x as LOADING_OPTIONS_KEY,
  L as THEME_KEY,
  T as UPDATE_OPTIONS_KEY,
  vue_echarts_default as default
};
//# sourceMappingURL=vue-echarts.js.map
